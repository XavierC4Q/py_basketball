# -*- coding: utf-8 -*-
# Generated by Django 1.11.20 on 2019-03-20 17:01
from __future__ import unicode_literals

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.ASCIIUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=128)),
                ('last_name', models.CharField(max_length=128)),
                ('favorite_team', models.CharField(choices=[(b'ATLANTA HAWKS', b'Atlanta Hawks'), (b'BOSTON CELTICS', b'Boston Celtics'), (b'LOS ANGELES CLIPPERS', b'Los Angeles Clippers'), (b'CLEVELAND CAVAILERS', b'Cleveland Cavailers'), (b'BROOKLYN NETS', b'Brooklyn Nets'), (b'MEMPHIS GRIZZLES', b'Memphis Grizzles'), (b'PHILADELPHIA 76ERS', b'Philadelphia 76ers'), (b'NEW YORK KNICKS', b'New York Knicks'), (b'ORLANDO MAGIC', b'Orlando Magic'), (b'DETROIT PISTONS', b'Detroit Pistons'), (b'MINNESOTA TIMBERWOLVES', b'Minnesota Timberwolves'), (b'INDIANA PACERS', b'Indiana Pacers'), (b'MILWAUKEE BUCKS', b'Milwaukee Bucks'), (b'LOS ANGELES LAKERS', b'Los Angeles Lakers'), (b'TORONTO RAPTORS', b'Toronto Raptors'), (b'DALLAS MAVERICKS', b'Dallas Mavericks'), (b'HOUSTON ROCKETS', b'Houston Rockets'), (b'DENVER NUGGETS', b'Denver Nuggets'), (b'NEW ORLEANS PELICANS', b'New Orleans Pelicans'), (b'MIAMI HEAT', b'Miami Heat'), (b'CHICAGO BULLS', b'Chicago Bulls'), (b'GOLDEN STATE WARRIORS', b'Golden State Warriors'), (b'SACRAMENTO KINGS', b'Sacramento Kings'), (b'SAN ANTONIO SPURS', b'San Antonio Spurs'), (b'PHOENIX SUNS', b'Phoenix Suns'), (b'OKLAHOMA CITY THUNDER', b'Oklahoma City Thunder'), (b'PORTLAND TRAILBLAZERS', b'Portland Trailblazers'), (b'CHARLOTTE HORNETS', b'Charlotte Hornets'), (b'WASHINGTON WIZARDS', b'Washington Wizards'), (b'UTAH JAZZ', b'Utah Jazz')], default='NONE', max_length=25)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
